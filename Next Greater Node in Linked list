# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def nextLargerNodes(self, head: Optional[ListNode]) -> List[int]:
        lst=[]
        lst2=[]
        while head:
            lst.append(head.val)
            head=head.next
        for i in range (len(lst)):
            added = False
            for j in range(i+1,len(lst)):
                if lst[i]<lst[j]:
                    added=True
                    lst2.append(lst[j])
                    break
            if added==False:
                lst2.append(0)
        return lst2
        # lst=[]
        # kst=[]
        # bst=[]
        # while head:
        #     lst.append(head.val)
        #     head=head.next
        # for i in range(len(lst)):
        #     for j in range(1,len(lst)):
        #         if lst[i]<lst[j]:
        #             kst.append(lst[j])
                     

#         lst=[]
#         kst=[]
#         while head:
#             lst.append(head.val)
#             head=head.next
#         kst.append(lst[0])
#         for i in range(1,len(lst)):
#             while kst[i-1]!=0:
#                 kst[i]=0
#                 if lst[i]>kst[i-1]:
#                     kst[i-1]=lst[i]
#         return kst            
            
            
            
            
            
            #         for i in range(len(lst)):
#             for j in range(1,len(lst)):
#                 if lst[i]<lst[j]:
#                     kst.append(lst[j])
#                     # if len(kst)==0
#                 else:
#                     kst.append(0)
#                     break
#         return kst
            
        

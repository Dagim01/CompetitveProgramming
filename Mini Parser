# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def __init__(self, value=None):
#        """
#        If value is not specified, initializes an empty list.
#        Otherwise initializes a single integer equal to value.
#        """
#
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def add(self, elem):
#        """
#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
#        :rtype void
#        """
#
#    def setInteger(self, value):
#        """
#        Set this NestedInteger to hold a single integer equal to value.
#        :rtype void
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """
class Solution:
    s: str
    ci: dict[int, int]  # V is ind of close parenthesis of opening parenthesis K

    def deserialize(self, s: str) -> NestedInteger:
        # prepare ci
        self.s = s
        self.ci = ci = {}  # closing indices of keys
        ps: list[int] = []  # stack of parentheses' pos
        for i, ch in enumerate(s):
            if ch == "[":
                ps.append(i)
            elif ch == "]":
                oi = ps.pop()  # opening index
                ci[oi] = i

        # work
        return self.recur(0, len(s) - 1).getList()[0]

    def recur(self, start, end) -> NestedInteger:
        # both start and end are inclusive
        ni = NestedInteger()
        s = self.s
        if start + 1 == end and s[start] == "[" and s[end] == "]":
            ni.add(NestedInteger())
            return ni
        i = start
        ns = i  # number start
        while i <= end:
            if s[i] == "[":
                ni.add(self.recur(i + 1, self.ci[i] - 1))
                ns = i = self.ci[i] + 1
            elif s[i] == ",":
                if i != ns:
                    ni.add(NestedInteger(int(s[ns:i])))
                ns = i = i + 1
            else:
                i += 1
        if ns <= end:
            ni.add(NestedInteger(int(s[ns : end + 1])))
        return ni
   
